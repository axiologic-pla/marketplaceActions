name: Get Organization Info
description: 'An action to retrieve information about an organization, its members, teams, and repositories.'
branding:
  icon: 'info'
  color: 'yellow'

on:
  workflow_dispatch:
    inputs:
      secretToken:
        description: 'Enter the secret token'
        required: true
        type: string
      outputFileName:
        description: 'Enter how the file should be called.'
        required: true
        type: string
        default: 'report'


runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - run: |
        ORG_NAME=${{ github.repository_owner }}
        GITHUB_TOKEN=${{ inputs.secretToken }}

        timestamp=$(date)

        ORG_API_URL="https://api.github.com/orgs/$ORG_NAME"

        # Send a GET request to GH API and retrieve members from organization
        response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$ORG_API_URL/members")
        if [[ $response == *"Bad credentials"* ]]; then
          cat >${{ inputs.outputFileName }}.md <<EOF
        Bad credentials: The provided token has no access for running this script!

        Follow the Readme.md file for more information about the installation
        EOF
        else
          # Get organization members
          members=$(echo "$response" | jq -r '.[].login')

          # Username and roles:
          users=()
          roles=()
          for username in $members; do
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$ORG_API_URL/memberships/$username")

            role=$(echo "$response" | jq -r '.role')
            users+=("$username")
            roles+=("$role")

          done

          # Name of members
          names=()
          for member_id in $members; do
            USER_API_URL="https://api.github.com/users"

            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$USER_API_URL/$member_id")

            member_name=$(echo "$response" | jq -r '.name')
            names+=("$member_name")

          done

          # Teams
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$ORG_API_URL/teams")

          declare -A teams
          while IFS= read -r team_info; do
            team_id=$(echo "$team_info" | jq -r '.id')
            team_name=$(echo "$team_info" | jq -r '.name')
            teams[$team_id]=$team_name
          done <<<"$(echo "$response" | jq -c '.[]')"

          # Team's members
          declare -A team_content
          for id in "${!teams[@]}"; do
            TEAM_API_URL="https://api.github.com/teams"

            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$TEAM_API_URL/$id/members")
            team_member_name=$(echo "$response" | jq -r '.[].login')

            # key = name of team, value = members which belongs to that team
            team_content["${teams[$id]}"]="$team_member_name"

          done

          # Write member title in file ${{ inputs.outputFileName }}.md
          cat >${{ inputs.outputFileName }}.md <<EOF

        # GitHub Access Report - Status
        Generated at $timestamp

        ## Organization: **$ORG_NAME**

        ### Members

        | No | Username | Name | Role | Teams |
        | -- | -------- | ---- | ---- | ----- |
        EOF

          # Write member content in file ${{ inputs.outputFileName }}.md
          length=${#users[@]}
          # Range of length of users
          for i in $(seq 1 "$length"); do
            echo -n "| $i | ${users[$i - 1]} | " >>${{ inputs.outputFileName }}.md
            if [[ "${names[$i - 1]}" == "null" ]]; then
              echo -n " | " >>${{ inputs.outputFileName }}.md
            else
              echo -n "${names[$i - 1]} | " >>${{ inputs.outputFileName }}.md
            fi
            if [[ "${roles[$i - 1]}" == "admin" ]]; then
              echo -n "<ins>**${roles[$i - 1]}**</ins> | " >>${{ inputs.outputFileName }}.md
            else
              echo -n "${roles[$i - 1]} | " >>${{ inputs.outputFileName }}.md
            fi
            for id in "${!team_content[@]}"; do
              for team_name in ${team_content[$id]}; do
                if [ "${users[$i - 1]}" == "$team_name" ]; then
                  echo -n "$id<br>" >>${{ inputs.outputFileName }}.md
                fi
              done
            done

            echo "|" >>${{ inputs.outputFileName }}.md
          done

          # Repositories
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$ORG_API_URL/repos")

          response_repo_name=$(echo "$response" | jq -r '.[].name')
          response_repo_visibility=$(echo "$response" | jq -r '.[].visibility')

          repo_name=()
          repo_visibility=()
          for name in $response_repo_name; do
            repo_name+=("$name")
          done
          for visibility in $response_repo_visibility; do
            repo_visibility+=("$visibility")
          done

          # Write repository title in file ${{ inputs.outputFileName }}.md
          cat >>${{ inputs.outputFileName }}.md <<EOF

        ### Repositories

        | No | Repo Name | Visibility | Members/Teams | Role |
        | -- | --------- | ---------- | ------------- | ---- |
        EOF

          length_repo="${#repo_name[@]}"
          declare -A repo_perms_error
          for i in $(seq 1 "$length_repo"); do

            REPO_API_URL="https://api.github.com/repos/$ORG_NAME/${repo_name[$i - 1]}"

            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_API_URL/collaborators")
            if jq -e '.message' <<<"$response" >/dev/null 2>&1; then
              repo_perms_error["${repo_name[$i - 1]}"]=$(echo "$response" | jq -r '.message')
              response_repo_member=""
              response_repo_member_roles=""
            else
              response_repo_member=$(echo "$response" | jq -r '.[].login')
              response_repo_member_roles=$(echo "$response" | jq -r '.[].role_name')
            fi

            repo_member_name=()
            repo_member_role=()
            for name in $response_repo_member; do
              repo_member_name+=("$name")
            done
            for role in $response_repo_member_roles; do
              repo_member_role+=("$role")
            done

            # Repo Team
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_API_URL/teams")
            if jq -e '.message' <<<"$response" >/dev/null 2>&1; then
              response_repo_team_name=""
              response_repo_team_permission=""
            else
              response_repo_team_name=$(echo "$response" | jq -r '.[].name')
              response_repo_team_permission=$(echo "$response" | jq -r '.[].permission')
            fi

            repo_team_name=()
            repo_team_permission=()
            for team_name in $response_repo_team_name; do
              repo_team_name+=("$team_name")
            done
            for team_perm in $response_repo_team_permission; do
              repo_team_permission+=("$team_perm")
            done

            # Write repository content in file ${{ inputs.outputFileName }}.md
            echo -n "| $i | ${repo_name[$i - 1]} | ${repo_visibility[$i - 1]} | " >>${{ inputs.outputFileName }}.md

            # Range of length of members from repo
            length_repo_members="${#repo_member_name[@]}"
            length_repo_groups="${#repo_team_name[@]}"

            if [[ $length_repo_members != 0 ]] || [[ $length_repo_groups != 0 ]]; then
              if [[ $length_repo_members != 0 ]]; then
                echo -n "**Members**<br>" >>${{ inputs.outputFileName }}.md
                for j in $(seq 0 "$length_repo_members"); do
                  echo -n "${repo_member_name[$j]}<br>" >>${{ inputs.outputFileName }}.md
                done
              fi
              if [[ $length_repo_groups != 0 ]]; then
                echo -n "**Teams**<br>" >>${{ inputs.outputFileName }}.md
                for j in $(seq 0 "$length_repo_groups"); do
                  echo -n "${repo_team_name[$j]}<br>" >>${{ inputs.outputFileName }}.md
                done
              fi

              echo -n " | " >>${{ inputs.outputFileName }}.md

              if [[ $length_repo_members != 0 ]]; then
                echo -n "<br>" >>${{ inputs.outputFileName }}.md
                for j in $(seq 0 "$length_repo_members"); do
                  echo -n "${repo_member_role[$j]}<br>" >>${{ inputs.outputFileName }}.md
                done
              fi
              if [[ $length_repo_groups != 0 ]]; then
                echo -n "<br>" >>${{ inputs.outputFileName }}.md
                for j in $(seq 0 "$length_repo_groups"); do
                  echo -n "${repo_team_permission[$j]}<br>" >>${{ inputs.outputFileName }}.md
                done
              fi
              echo " |" >>${{ inputs.outputFileName }}.md

            else
              echo " | |" >>${{ inputs.outputFileName }}.md
            fi
          done

          # Provide error messages in case these exist
          if [[ -n "${#repo_perms_error[@]}" ]]; then
            echo ""
            echo "### You have the following errors:" >>${{ inputs.outputFileName }}.md
            echo ""
            for i in "${!repo_perms_error[@]}"; do
              echo "- Repo: $i" >>${{ inputs.outputFileName }}.md
              echo "    - Message: ${repo_perms_error[$i]}" >>${{ inputs.outputFileName }}.md
            done
            echo "" >>${{ inputs.outputFileName }}.md
            echo "This can be caused by not having permission on those repos." >>${{ inputs.outputFileName }}.md
          fi
        fi
        
        current_date=$(date +"%d %B %Y")
        ls -a
        git config --global user.email "your@email.com"
        git config --global user.name "${{ github.actor }}"
        git add .
        git commit -m "File ${{ inputs.outputFileName }}.md - Generated at $current_date"
        git push

      shell: bash
