name: 'Get Organization Info'
description: 'An action to retrieve information about an organization, its members, teams, and repositories.'
branding:
  icon: 'info'
  color: 'yellow'

inputs:
  secretToken:
    description: 'Enter the secret token'
    required: true
  outputFileName:
    description: 'Enter how the file should be called.'
    required: true


runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - run: |
        ORG_NAME=${{ github.repository_owner }}
        GITHUB_TOKEN=${{ inputs.secretToken }}
        filename=${{ inputs.outputFileName }}

        timestamp=$(date)

        # Function for API request
        make_api_request() {
            api_url=$1
            curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$api_url"
        }
        # Function for fetching the CodeOwners 
        fetch_and_format_codeowners() {
            repo_name=$1
            paths=("CODEOWNERS" ".github/CODEOWNERS" "docs/CODEOWNERS")
            formatted_codeowners=""
        
            for path in "${paths[@]}"; do
                codeowners_response=$(make_api_request "https://api.github.com/repos/$ORG_NAME/$repo_name/contents/$path")
                if jq -e '.download_url' <<<"$codeowners_response" >/dev/null 2>&1; then
                    download_url=$(jq -r '.download_url' <<< "$codeowners_response")
                    codeowners_content=$(curl -s "$download_url")
                    formatted_codeowners=$(echo "$codeowners_content" | sed -e '/^#/d' -e '/^$/d' | tr '\n' '<br>')
                    break
                fi
            done
        
            echo "${formatted_codeowners:-No CODEOWNERS file found}"
        }
        # Function for comparing and getting the highest role between org members/repo and repo_teams
        get_highest_role() {
            username=$1
            repo_role=$2
            teams=$3
        
            # Check if the user exists in the organization members
            if [[ "${user_roles[$username]}" == "admin" ]]; then
                # If the user is an admin in the organization, return only the role
                echo "admin"
            elif [[ "${user_roles[$username]}" == "member" ]]; then
                # If the user is a member in the organization, check if they have a higher role in the repository team
                team_role=""
        
                if [[ "$teams" != "No teams found" ]]; then
                    IFS=',' read -r -a team_info <<< "$teams"
                    for team in "${team_info[@]}"; do
                        IFS=':' read -r -a team_permission <<< "$team"
                        team_name="${team_permission[0]}"
                        permission="${team_permission[1]}"
        
                        if [[ "${org_team_members[$team_name]}" =~ $username ]] && [[ "$permission" == "admin" ]]; then
                            team_role="admin(Team)"
                            break
                        elif [[ "${org_team_members[$team_name]}" =~ $username ]] && [[ "$permission" == "write" ]] && [[ "$team_role" != "admin(Team)" ]]; then
                            team_role="write(Team)"
                        elif [[ "${org_team_members[$team_name]}" =~ $username ]] && [[ "$permission" == "read" ]] && [[ "$team_role" != "admin(Team)" ]] && [[ "$team_role" != "write(Team)" ]]; then
                            team_role="read(Team)"
                        fi
                    done
                fi
        
                if [[ -n "$team_role" ]]; then
                    echo "$team_role"
                else
                    echo "$repo_role(Repo)"
                fi
            else
                # If the user is not found in the organization members, return the role from the repository
                echo "$repo_role(Repo)"
            fi
        }
        # Function for generating the md table.
        generate_markdown_table() {
            org_name=$1
            declare -n repo_data_ref=$2
            declare -n user_roles_ref=$3
            declare -n org_team_members_ref=$4
            declare -n names_ref=$5
            timestamp=$6
            filename=$7
        
            # Generate the Markdown content
            markdown_content="# GitHub Access Report - Status\n"
            markdown_content+="Generated at $timestamp\n\n"
            markdown_content+="## Organization: **$org_name**\n\n"
            markdown_content+="### Members\n\n"
            markdown_content+="| No | Username | Name | Role | Teams |\n"
            markdown_content+="| -- | -------- | ---- | ---- | ----- |\n"
        
            # Add user information to the Markdown content
            i=1
            for username in "${!user_roles_ref[@]}"; do
                name=${names_ref[$username]}
                role=${user_roles_ref[$username]}
                teams=""
                for team_name in "${!org_team_members_ref[@]}"; do
                    if [[ "${org_team_members_ref[$team_name]}" =~ $username ]]; then
                        teams+="$team_name<br>"
                    fi
                done
                markdown_content+="| $((i++)) | $username | $name | $role | $teams |\n"
            done
        
            # Add repository information to the Markdown content
            markdown_content+="\n### Repositories\n\n"
            markdown_content+="| No | Repo Name | Visibility | Branches | CODEOWNERS | Members | Member Roles (Source) | Teams | Team Roles |\n"
            markdown_content+="| -- | --------- | ---------- | -------- | ---------- | ------- | --------------------- | ----- | ---------- |\n"
        
            # Add repository details to the Markdown content
            i=1
            for repo_name in "${!repo_data_ref[@]}"; do
                repo_info="${repo_data_ref[$repo_name]}"
                visibility=$(jq -r '.visibility' <<< "$repo_info")
                collaborators=$(jq -r '.collaborators' <<< "$repo_info")
                teams=$(jq -r '.teams' <<< "$repo_info")
                branches=$(jq -r '.branches' <<< "$repo_info")
                codeowners=$(jq -r '.codeowners' <<< "$repo_info")
        
                markdown_content+="| $((i++)) | $repo_name | $visibility | "
        
                # Add branches
                IFS=',' read -r -a branch_names <<< "$branches"
                for branch_name in "${branch_names[@]}"; do
                    markdown_content+="$branch_name<br>"
                done
        
                if [[ "$codeowners" == "null" ]]; then
                    markdown_content+=" |  | "
                else
                    markdown_content+=" | $codeowners | "
                fi
        
                # Add members and their roles
                members=""
                member_roles=""
        
                if [[ -n "$collaborators" ]]; then
                    IFS=',' read -r -a collaborator_info <<< "$collaborators"
                    for info in "${collaborator_info[@]}"; do
                        IFS=':' read -r -a user_role <<< "$info"
                        username="${user_role[0]}"
                        role="${user_role[1]}"
                        members+="$username<br>"
                        highest_role=$(get_highest_role "$username" "$role" "$teams")
                        member_roles+="$highest_role<br>"
                    done
                else
                    members="No collaborators found"
                    member_roles=""
                fi
        
                markdown_content+="$members | $member_roles | "
        
                # Add teams and their roles
                team_names=""
                team_roles=""
        
                if [[ "$teams" != "No teams found" ]]; then
                    IFS=',' read -r -a team_info <<< "$teams"
                    for info in "${team_info[@]}"; do
                        IFS=':' read -r -a team_permission <<< "$info"
                        team_name="${team_permission[0]}"
                        permission="${team_permission[1]}"
                        team_names+="$team_name<br>"
                        team_roles+="$permission<br>"
                    done
                else
                    team_names="No teams found"
                    team_roles=""
                fi
        
                markdown_content+="$team_names | $team_roles |\n"
            done
        
            # Write the Markdown content to the file
            echo -e "$markdown_content" > "$filename.md"
            echo "Markdown table generated successfully in $filename.md"
        }
        
        # API URLs
        ORG_API_URL="https://api.github.com/orgs/$ORG_NAME"
        USER_API_URL="https://api.github.com/users"
        ORG_TEAMS_API_URL="https://api.github.com/orgs/$ORG_NAME/teams"
        
        
        # Retrieve members from organization
        org_members_response=$(make_api_request "$ORG_API_URL/members")
        if [[ $org_members_response == *"Bad credentials"* ]]; then
            cat >$filename.md <<EOF
        Bad credentials: The provided token has no access for running this script!
        
        Follow the Readme.md file for more information about the installation
        EOF
        else
            # Get organization members
            org_members=$(echo "$org_members_response" | jq -r '.[].login')
        
            # Username and roles:
            declare -A user_roles
            for username in $org_members; do
              username_response=$(make_api_request "$ORG_API_URL/memberships/$username")
              role=$(echo "$username_response" | jq -r '.role')
              user_roles[$username]=$role
            done
        
            # Name of members
            declare -A names
            for member_id in $org_members; do
                user_id_response=$(make_api_request "$USER_API_URL/$member_id")
                member_name=$(echo "$user_id_response" | jq -r '.name // ""')
                names[$member_id]=$member_name
            done
        
            # Teams
            org_teams_response=$(make_api_request "$ORG_TEAMS_API_URL")
            declare -A org_team_members
            while IFS= read -r team_info; do
              team_name=$(echo "$team_info" | jq -r '.name')
              members_url=$(echo "$team_info" | jq -r '.members_url')
              members_response=$(make_api_request "${members_url//\{\/member\}/}")
        
              org_team_members[$team_name]=$(echo "$members_response" | jq -r '.[].login' | tr '\n' ' ')
            done <<< "$(echo "$org_teams_response" | jq -c '.[]')"
        
            # Repositories
            repo_response=$(make_api_request "$ORG_API_URL/repos")
            declare -A repo_info
            while IFS= read -r repo; do
                name=$(echo "$repo" | jq -r '.name')
                visibility=$(echo "$repo" | jq -r '.visibility')
                repo_info[$name]=$visibility
            done <<< "$(echo "$repo_response" | jq -c '.[]')"
        
            # Repository data
            declare -A repo_data
            for repo_name in "${!repo_info[@]}"; do
                REPO_API_URL="https://api.github.com/repos/$ORG_NAME/$repo_name"
        
                # Fetch Collaborators and Roles
                collaborators_response=$(make_api_request "$REPO_API_URL/collaborators")
                if jq -e '.message' <<<"$collaborators_response" >/dev/null 2>&1; then
                    repo_data[$repo_name]=$(jq -n --arg visibility "${repo_info[$repo_name]}" --arg error "$(jq -r '.message' <<< "$collaborators_response")" '{
                        "visibility": $visibility,
                        "collaborators_error": $error,
                        "collaborators": "",
                        "teams": "",
                        "branches": ""
                    }')
                else
                    collaborators=""
                    while IFS= read -r collaborator; do
                        username=$(jq -r '.login' <<< "$collaborator")
                        role=$(jq -r '.role_name' <<< "$collaborator")
                        collaborators+="$username:$role,"
                    done <<< "$(jq -c '.[]' <<< "$collaborators_response")"
                    collaborators=${collaborators%,}
        
                    # Fetch Teams
                    teams_response=$(make_api_request "$REPO_API_URL/teams")
        
                    teams=""
                    if ! jq -e '.message' <<<"$teams_response" >/dev/null 2>&1; then
                        if jq -e 'length > 0' <<<"$teams_response" >/dev/null 2>&1; then
                            while IFS= read -r team; do
                                team_name=$(jq -r '.name' <<< "$team")
                                team_permission=$(jq -r '.permission' <<< "$team")
                                case "$team_permission" in
                                    "push") team_permission="write" ;;
                                    "pull") team_permission="read" ;;
                                esac
                                teams+="$team_name:$team_permission,"
                            done <<< "$(jq -c '.[]' <<< "$teams_response")"
                            teams=${teams%,}
                        else
                            teams="No teams found"
                        fi
                    else
                        teams="No teams found"
                    fi
        
                    # Fetch Branches
                    branches_response=$(make_api_request "$REPO_API_URL/branches")
                    branches=""
                    while IFS= read -r branch; do
                        branch_name=$(jq -r '.name' <<< "$branch")
                        branches+="$branch_name,"
                    done <<< "$(jq -c '.[]' <<< "$branches_response")"
                    branches=${branches%,}
        
                    # Fetch CODEOWNERS
                    formatted_codeowners=$(fetch_and_format_codeowners "$repo_name")
        
                    repo_data[$repo_name]=$(jq -n --arg visibility "${repo_info[$repo_name]}" --arg collaborators "$collaborators" --arg teams "$teams" --arg branches "$branches" --arg codeowners "$formatted_codeowners" '{
                        "visibility": $visibility,
                        "collaborators_error": "",
                        "collaborators": $collaborators,
                        "teams": $teams,
                        "branches": $branches,
                        "codeowners": $codeowners
                    }')
                fi
            done
        
            # Call the function to generate the Markdown table
            generate_markdown_table "$ORG_NAME" repo_data user_roles org_team_members names "$timestamp" "$filename"
        fi
        
        current_date=$(date +"%d %B %Y")
        ls -a
        git config --global user.email "your@email.com"
        git config --global user.name "${{ github.actor }}"
        git add .
        git commit -m "File ${{ inputs.outputFileName }}.md - Generated at $current_date"
        git push

      shell: bash
